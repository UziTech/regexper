grammar JavascriptRegexp
  root <- ( ( "/" regexp "/" flags:[yigmus]* ) / regexp flags:""? ) <Root>
  regexp <- match:match alternates:( "|" match )* <Regexp>
  match <- (!repeat) parts:match_fragment* <Match>
  anchor <- ( "^" / "$" / "\\" [AGZz] ) <Anchor>
  match_fragment <- content:( anchor / subexp / comment / charset / terminal ) repeat:repeat? <MatchFragment>
  repeat <- spec:( repeat_any / repeat_required / repeat_optional / repeat_spec ) greedy:"?"? <Repeat>
  repeat_any <- "*" <RepeatAny>
  repeat_required <- "+" <RepeatRequired>
  repeat_optional <- "?" <RepeatOptional>
  repeat_spec <- ( "{" min:[0-9]+ "," max:[0-9]+ "}"
                 / "{" min:[0-9]+ ",}"
                 / "{" exact:[0-9]+ "}" ) <RepeatSpec>
  subexp <- "(" capture:( "?<" groupname:name ">" / "?:" / "?=" / "?!" / "?<=" / "?<!" / "?>" )? regexp ")" <Subexp>
  comment <- "(?#" comment:[^)]* ")" <Comment>
  name <- alpha (alpha / numeric)*
  alpha <- [a-zA-Z]
  numeric <- [0-9]
  charset <- "[" invert:"^"? parts:( posix / charset_range / charset_terminal )* "]" <Charset>
  posix <- "[:" invert:"^"? name:( "alnum" / "alpha" / "ascii" / "blank" / "cntrl" / "digit" / "graph" / "lower" / "print" / "punct" / "space" / "upper" / "word" / "xdigit" ) ":]" <Posix>
  charset_range <- first:charset_range_terminal "-" last:charset_range_terminal <CharsetRange>
  charset_terminal <- charset_escape <CharsetEscape>
                    / charset_literal <Literal>
  charset_range_terminal <- charset_range_escape <CharsetEscape>
                          / charset_literal <Literal>
  charset_escape <- "\\" esc:(
         code:[abdDefhHnNrRsStvVwW] arg:""?
       / control_escape
       / octal_escape
       / hex_escape
       / unicode_escape
       / null_escape )
  charset_range_escape <- "\\" esc:(
         code:[bfhHnNrRtvV] arg:""?
       / control_escape
       / octal_escape
       / hex_escape
       / unicode_escape
       / null_escape )
  charset_literal <- ( ""? literal:[^\\\]] )
                   / ( literal:"\\" &"c" )
                   / ( "\\" literal:[^abdDefhHnNrRsStvVwW] )
  terminal <- "." <AnyCharacter>
            / escape <Escape>
            / literal <Literal>
  escape <- "\\" esc:(
         code:[abBdDefhHnNrRsStvVwW1-9] arg:""?
       / control_escape
       / octal_escape
       / hex_escape
       / unicode_escape
       / null_escape )
  literal <- ( ""? literal:[^|\\/.\[\(\)?+*$^] )
           / ( literal:"\\" &"c" )
           / ( "\\" literal:. )

  control_escape <- code:"c" arg:[a-zA-Z]
  octal_escape <- code:"0" arg:[0-7]+
  hex_escape <- code:"x" arg:( [0-9a-fA-F] [0-9a-fA-F] )
  unicode_escape <- code:"u" arg:( [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] )
  null_escape <- code:"0" arg:""?
